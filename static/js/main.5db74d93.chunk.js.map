{"version":3,"sources":["reportWebVitals.ts","components/AddItemForm.tsx","components/EditableSpan.tsx","components/Task.tsx","components/Todolist.tsx","api/todolist-api.ts","bll/tasks-reducer.ts","bll/todolists-reducer.ts","App.tsx","bll/store.ts","index.tsx"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","AddItemForm","React","memo","props","useState","title","setTitle","error","setError","addItem","trim","TextField","variant","value","onChange","e","currentTarget","onKeyPress","charCode","label","helperText","IconButton","color","onClick","AddBox","EditableSpan","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","Task","useSelector","state","onClickHandler","useCallback","removeTask","task","todolistId","_id","onChangeHandler","updateTask","checked","onTitleChangeHandler","newValue","isDone","className","Checkbox","Delete","Todolist","tasks","filteredTasks","filter","t","addTask","changeTodolistTitle","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","removeTodolist","map","style","paddingTop","Button","instance","axios","create","baseURL","todoApi","get","post","delete","put","taskId","initialState","setTasksAC","type","addTaskAC","newTask","changeTaskStatusAC","changeTaskTitleAC","removeTaskAC","addTodolistAC","v1","changeTodolistTitleAC","removeTodolistAC","App","todolists","dispatch","useDispatch","useEffect","a","res","data","el","action","response","catch","err","console","log","addTasksTC","id","updateTasksTC","deleteTasksTC","addTodolist","addTodolistsThunk","deleteTodolistsThunk","updateTodolistsThunk","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","Container","fixed","Grid","container","padding","spacing","tl","allTodolistTasks","item","Paper","rootReducer","combineReducers","stateCopy","newTasks","todolistTasks","newTasksArray","copyState","todolist","find","store","createStore","applyMiddleware","thunk","window","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qKAceA,G,MAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,Q,iDCDDQ,EAAcC,IAAMC,MAAK,SAASC,GAA8B,IAAD,EAEhDC,mBAAS,IAFuC,mBAEnEC,EAFmE,KAE5DC,EAF4D,OAGhDF,mBAAwB,MAHwB,mBAGnEG,EAHmE,KAG5DC,EAH4D,KAKlEC,EAAU,WACS,KAAjBJ,EAAMK,QACNP,EAAMM,QAAQJ,GACdC,EAAS,KAETE,EAAS,sBAiBjB,OAAO,gCACH,cAACG,EAAA,EAAD,CAAWC,QAAQ,WACRL,QAASA,EACTM,MAAOR,EACPS,SAjBS,SAACC,GACrBT,EAASS,EAAEC,cAAcH,QAiBdI,WAdW,SAACF,GACT,OAAVR,GACAC,EAAS,MAEM,KAAfO,EAAEG,UACFT,KAUOU,MAAM,QACNC,WAAYb,IAEvB,cAACc,EAAA,EAAD,CAAYC,MAAM,UAAUC,QAASd,EAArC,SACI,cAACe,EAAA,EAAD,YCrCCC,EAAexB,IAAMC,MAAK,SAAUC,GAA+B,IAAD,EAC7CC,oBAAS,GADoC,mBACtEsB,EADsE,KAC5DC,EAD4D,OAEnDvB,mBAASD,EAAMU,OAFoC,mBAEtER,EAFsE,KAE/DC,EAF+D,KAgB3E,OAAOoB,EACE,cAACf,EAAA,EAAD,CAAWE,MAAOR,EAAOS,SALd,SAACC,GACjBT,EAASS,EAAEC,cAAcH,QAI4Be,WAAS,EAACC,OAT1C,WACrBF,GAAY,GACZxB,EAAMW,SAAST,MAQb,sBAAMyB,cAda,WACrBH,GAAY,GACZrB,EAASH,EAAMU,QAYb,SAAwCV,EAAMU,W,mCCV3CkB,EAAO9B,IAAMC,MAAK,SAACC,GAClB6B,aAAY,SAAAC,GAAK,OAAIA,KAAnC,IAEUC,EAAiBC,uBAAY,kBAC/BhC,EAAMiC,WAAWjC,EAAMkC,KAAKC,WAAYnC,EAAMoC,OAC9C,CAACpC,EAAMkC,KAAKC,WAAYnC,EAAMoC,MAE5BC,EAAkBL,uBAAY,SAACpB,GACjCZ,EAAMsC,WAAWtC,EAAMkC,KAAKC,WAAanC,EAAMoC,IAAKpC,EAAME,MAAOU,EAAEC,cAAc0B,WAClF,CAACvC,EAAMkC,KAAKC,WAAYnC,EAAMoC,IAAKpC,EAAME,QAEtCsC,EAAuBR,uBAAY,SAACS,GACtCzC,EAAMsC,WAAWtC,EAAMkC,KAAKC,WAAYnC,EAAMoC,IAAKK,EAAUzC,EAAM0C,UACpE,CAAC1C,EAAMkC,KAAKC,WAAYnC,EAAMoC,IAAKpC,EAAM0C,SAE5C,OAAO,sBAAiCC,UAAW3C,EAAMkC,KAAKQ,OAAS,UAAY,GAA5E,UACH,cAACE,EAAA,EAAD,CACIL,QAASvC,EAAMkC,KAAKQ,OACpBvB,MAAM,UACNR,SAAU0B,IAGd,cAACf,EAAD,CAAcZ,MAAOV,EAAMkC,KAAKhC,MAAOS,SAAU6B,IACjD,cAACtB,EAAA,EAAD,CAAYE,QAASW,EAArB,SACI,cAACc,EAAA,EAAD,QATS7C,EAAMkC,KAAKC,eCCnBW,EAAWhD,IAAMC,MAAK,SAAUC,GAEzC,IAAM+C,EAAQlB,aAAmC,SAAAC,GAAK,OAAIA,EAAMiB,SAE1DC,EAAiC,WAAjBhD,EAAMiD,OAAsBF,EAAM/C,EAAMoC,KAAKa,QAAO,SAACC,GAAD,OAAyB,IAAbA,EAAER,UAAqC,cAAjB1C,EAAMiD,OAAyBF,EAAM/C,EAAMoC,KAAKa,QAAO,SAACC,GAAD,OAAyB,IAAbA,EAAER,UAAmBK,EAAM/C,EAAMoC,KAE1Me,EAAUnB,uBAAY,SAAC9B,GACzBF,EAAMmD,QAAQnD,EAAMoC,IAAKlC,KAC1B,CAACF,EAAMmD,QAASnD,EAAMoC,MAKnBgB,EAAsBpB,uBAAY,SAAC9B,GACrCF,EAAMoD,oBAAoBpD,EAAMoC,IAAKlC,KACtC,CAACF,EAAMoC,IAAKpC,EAAMoD,sBAEfC,EAAoBrB,uBAAY,kBAClChC,EAAMsD,aAAa,MAAOtD,EAAMoC,OAAM,CAACpC,EAAMoC,IAAKpC,EAAMsD,eACtDC,EAAuBvB,uBAAY,kBACrChC,EAAMsD,aAAa,SAAUtD,EAAMoC,OAAM,CAACpC,EAAMoC,IAAKpC,EAAMsD,eACzDE,EAA0BxB,uBAAY,kBACxChC,EAAMsD,aAAa,YAAatD,EAAMoC,OAAM,CAACpC,EAAMoC,IAAKpC,EAAMsD,eAElE,OAAO,gCACH,+BAAI,cAAChC,EAAD,CAAcZ,MAAOV,EAAME,MAAOS,SAAUyC,IAC5C,cAAClC,EAAA,EAAD,CAAYE,QAhBG,WACnBpB,EAAMyD,eAAezD,EAAMoC,MAevB,SACI,cAACS,EAAA,EAAD,SAGR,cAAChD,EAAD,CAAaS,QAAS6C,IACtB,qCAEQH,QAFR,IAEQA,OAFR,EAEQA,EAAeU,KAAI,SAACR,GAAD,OAAY,cAACtB,EAAD,CAAkBM,KAAMgB,EAAGf,WAAYnC,EAAMoC,IACxEA,IAAKc,EAAEd,IAAKlC,MAAOgD,EAAEhD,MAAOwC,OAAQQ,EAAER,OACtCJ,WAAYtC,EAAMsC,WAClBL,WAAYjC,EAAMiC,YAHoBiB,EAAEd,UAOpD,sBAAKuB,MAAO,CAAEC,WAAY,QAA1B,UACI,cAACC,EAAA,EAAD,CAAQpD,QAA0B,QAAjBT,EAAMiD,OAAmB,WAAa,OACnD7B,QAASiC,EACTlC,MAAO,UAFX,iBAKA,cAAC0C,EAAA,EAAD,CAAQpD,QAA0B,WAAjBT,EAAMiD,OAAsB,WAAa,OACtD7B,QAASmC,EACTpC,MAAO,UAFX,oBAIA,cAAC0C,EAAA,EAAD,CAAQpD,QAA0B,cAAjBT,EAAMiD,OAAyB,WAAa,OACzD7B,QAASoC,EACTrC,MAAO,YAFX,gC,iHChFN2C,E,MAAWC,EAAMC,OAAO,CAC1BC,QAAS,wCAuBAC,EAAU,WAIf,OADgBJ,EAASK,IAAoB,eAHxCD,EAAU,SAMJhE,GAEX,OADgB4D,EAASM,KAA2C,aAAc,CAAElE,MAAOA,KAPtFgE,EAAU,SAUJ/B,GAEX,OADgB2B,EAASO,OAAT,qBAA4ClC,KAXvD+B,EAAU,SAcJ/B,EAAoBjC,GAE/B,OADgB4D,EAASQ,IAAT,qBAAyCnC,GAAc,CAAEjC,MAAOA,KAf3EgE,EAAU,SAoBV/B,GACL,OAAO2B,EAASK,IAAT,qBAAgChC,EAAhC,YArBF+B,EAAU,SAuBR/B,EAAoBjC,GAC3B,OAAO4D,EAASM,KAAT,qBAA8DjC,EAA9D,UAAkF,CAAEjC,MAAOA,KAxB7FgE,EAAU,SA0BR/B,EAAoBoC,EAAgBrE,EAAewC,GAC1D,OAAOoB,EAASQ,IAAT,qBAAmDnC,EAAnD,kBAAuEoC,GAAU,CAAErE,MAAOA,EAAOwC,OAAQA,KA3B3GwB,EAAU,SA6BR/B,EAAoBoC,GAC3B,OAAOT,EAASO,OAAT,qBAA4ClC,EAA5C,kBAAgEoC,KCRzEC,EAA+B,GAmDxBC,EAAa,SAAC1B,EAAwBZ,GAC/C,MAAO,CAAEuC,KAAM,YAAa3B,QAAOZ,eAE1BwC,EAAY,SAACxC,EAAoByC,GAC1C,MAAO,CAAEF,KAAM,WAAYvC,aAAYyC,YAE9BC,EAAqB,SAAC1C,EAAoBC,EAAalC,EAAewC,GAC/E,MAAO,CAAEgC,KAAM,qBAAsBvC,aAAYC,MAAKlC,QAAOwC,WAEpDoC,EAAoB,SAAC3C,EAAoBC,EAAalC,EAAewC,GAC9E,MAAO,CAAEgC,KAAM,oBAAqBvC,aAAYC,MAAKlC,QAAOwC,WAEnDqC,EAAe,SAAC5C,EAAoBC,GAC7C,MAAO,CAAEsC,KAAM,cAAevC,aAAYC,QC5ExCoC,EAAoC,GA+C7BQ,EAAgB,SAAC9E,GAC1B,MAAO,CAAEwE,KAAM,eAAgBxE,MAAOA,EAAOiC,WAAY8C,gBAGhDC,EAAwB,SAAC/C,EAAoBjC,GACtD,MAAO,CAAEwE,KAAM,wBAAyBtC,IAAKD,EAAYjC,MAAOA,IAOvDiF,EAAmB,SAAChD,GAC7B,MAAO,CAAEuC,KAAM,kBAAmBtC,IAAKD,ICyB5BiD,MA3Ff,WAEI,IAAMC,EAAYxD,aAAmD,SAAAC,GAAK,OAAIA,EAAMuD,aAC9EtC,EAAQlB,aAA8C,SAAAC,GAAK,OAAIA,EAAMiB,SACrEuC,EAAWC,cAEjBC,qBAAU,WACNF,EDgEyB,uCAAM,WAAOA,GAAP,eAAAG,EAAA,sEACjBvB,IADiB,QAC7BwB,EAD6B,QAG/BC,KAAKjC,KAAI,SAACkC,GAAD,OAAaN,GDaHlD,ECbuBwD,EAAGxD,IDa3B,uCAAiB,WAAOkD,GAAP,mBAAAG,EAAA,sEACvBvB,EAAiB9B,GADM,OACnCsD,EADmC,OAEjC3C,EAAQ2C,EAAIC,KACZE,EAASpB,EAAW1B,EAAOX,GACjCkD,EAASO,GAJ8B,2CAAjB,4DAACzD,KCXvBkD,EA1BO,CAAEZ,KAAM,gBAAiBW,UA0BRK,EAAIC,OALO,2CAAN,yDC/D1B,CAACL,IAEcL,cACAA,cADlB,IAKM9B,EAAUnB,uBAAY,SAACG,EAAoBjC,GAC7CoF,EF+EkB,SAACnD,EAAoBjC,GAArB,8CAAuC,WAAOoF,GAAP,SAAAG,EAAA,sEACvDvB,EAAmB/B,EAAYjC,GAAOX,MAAK,SAAAuG,GAAQ,OACrDR,EAASX,EAAUxC,EAAY2D,EAASH,UAAQI,OAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,MAFhB,2CAAvC,sDE/ETG,CAAWhE,EAAYjC,MACjC,CAACoF,IAEEhD,EAAaN,uBAAY,SAACG,EAAoBiE,EAAYlG,EAAcwC,GAC1E4C,EFiFqB,SAACnD,EAAoBC,EAAalC,EAAewC,GAAjD,8CACzB,WAAO4C,GAAP,SAAAG,EAAA,sEACUvB,EAAmB/B,EAAYC,EAAKlC,EAAOwC,GAAQnD,MAAK,SAACuG,GAC3DR,EAASR,EAAkB3C,EAAYC,EAAKlC,EAAOwC,IACnD4C,EAAST,EAAmB1C,EAAYC,EAAKlC,EAAOwC,OACrDqD,OAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,MAJhC,2CADyB,sDEjFZK,CAAclE,EAAYiE,EAAIlG,EAAOwC,MAC/C,CAAC4C,IAEErD,EAAaD,uBAAY,SAACG,EAAoBoC,GAChDe,EFsFqB,SAACnD,EAAoBoC,GAArB,8CAAwC,WAAOe,GAAP,SAAAG,EAAA,sEACjDvB,EAAmB/B,EAAYoC,GADkB,cAEjEe,EAASP,EAAa5C,EAAYoC,IAF+B,2CAAxC,sDEtFZ+B,CAAcnE,EAAYoC,MACpC,CAACe,IAGEhC,EAAetB,uBAAY,SAAUtB,EAAyByB,GAChE,IAAM0D,EDiCH,CAAEnB,KAAM,yBAA0BtC,ICjCCD,EDiCQc,OCjCIvC,GAClD4E,EAASO,KACV,IAGGU,EAAcvE,uBAAY,SAAC9B,GAC7BoF,ED6CyB,SAACpF,GAAD,8CAAmB,WAAOoF,GAAP,SAAAG,EAAA,sEAC3BvB,EAAuBhE,GADI,cAEhDoF,EAASN,EAAc9E,IAFyB,2CAAnB,sDC7ChBsG,CAAkBtG,MAC5B,CAACoF,IAEE7B,EAAiBzB,uBAAY,SAACG,GAChCmD,EDqD4B,SAACnD,GAAD,8CAAwB,WAAOmD,GAAP,SAAAG,EAAA,sEACnCvB,EAAuB/B,GADY,cAExDmD,EAASH,EAAiBhD,IAF8B,2CAAxB,sDCrDnBsE,CAAqBtE,MAC/B,CAACmD,IAEElC,EAAsBpB,uBAAY,SAACG,EAAoBjC,GACzDoF,ED2C4B,SAACnD,EAAoBjC,GAArB,8CAAuC,WAAOoF,GAAP,SAAAG,EAAA,sEAClDvB,EAAuB/B,EAAYjC,GADe,cAEvEoF,EAASJ,EAAsB/C,EAAYjC,IAF4B,2CAAvC,sDC3CnBwG,CAAqBvE,EAAYjC,MAC3C,CAACoF,IAEJ,OACI,sBAAK3C,UAAU,MAAf,UACI,cAACgE,EAAA,EAAD,CAAQC,SAAS,SAAjB,SACI,eAACC,EAAA,EAAD,WACI,cAAC3F,EAAA,EAAD,CAAY4F,KAAK,QAAQ3F,MAAM,UAAU4F,aAAW,OAApD,SACI,cAACC,EAAA,EAAD,MAEJ,cAACC,EAAA,EAAD,CAAYxG,QAAQ,KAApB,8BAKR,eAACyG,EAAA,EAAD,CAAWC,OAAK,EAAhB,UACI,cAACC,EAAA,EAAD,CAAMC,WAAS,EAAC1D,MAAO,CAAE2D,QAAS,QAAlC,SACI,cAACzH,EAAD,CAAaS,QAASiG,MAE1B,cAACa,EAAA,EAAD,CAAMC,WAAS,EAACE,QAAS,EAAzB,SAEQlC,EAAU3B,KAAI,SAAA8D,GACV,IAAIC,EAAmB1E,EAAMyE,EAAGpF,KAEhC,OAAO,cAACgF,EAAA,EAAD,CAAMM,MAAI,EAAV,SACH,cAACC,EAAA,EAAD,CAAOhE,MAAO,CAAE2D,QAAS,QAAzB,SACI,cAACxE,EAAD,CACIV,IAAKoF,EAAGpF,IACRlC,MAAOsH,EAAGtH,MACV6C,MAAO0E,EACPxF,WAAYA,EACZqB,aAAcA,EACdH,QAASA,EACTb,WAAYA,EACZW,OAAQuE,EAAGvE,OACXQ,eAAgBA,EAChBL,oBAAqBA,OAZVoE,EAAGpF,iB,kBC1FhDwF,GAAcC,aAAgB,CAChC9E,MH0CwB,WAAgF,IAA/EjB,EAA8E,uDAAtD0C,EAAcqB,EAAwC,uCAEvG,OAAQA,EAAOnB,MACX,IAAK,YACD,IAAMoD,EAAS,eAAQhG,GAEvB,OADAgG,EAAUjC,EAAO1D,YAAc0D,EAAO9C,MAC/B+E,EAEX,IAAK,WACD,IAAMA,EAAS,eAAQhG,GACjB8C,EAAeiB,EAAOjB,QACtB7B,EAAQ+E,EAAUjC,EAAO1D,YACzB4F,EAAQ,CAAInD,GAAJ,mBAAgB7B,IAE9B,OADA+E,EAAUjC,EAAO1D,YAAc4F,EACxBD,EAEX,IAAK,oBACD,IAAIE,EAAgBlG,EAAM+D,EAAO1D,YAC7B8F,EAAgBD,EACftE,KAAI,SAAAR,GAAC,OAAIA,EAAEd,MAAQyD,EAAOzD,IAAjB,2BAA4Bc,GAA5B,IAA+BhD,MAAO2F,EAAO3F,QAAUgD,KAGrE,OADApB,EAAM+D,EAAO1D,YAAc8F,EACpB,eAAMnG,GAEjB,IAAK,qBACD,IAAIkG,EAAgBlG,EAAM+D,EAAO1D,YAC7B8F,EAAgBD,EACftE,KAAI,SAAAR,GAAC,OAAIA,EAAEd,MAAQyD,EAAOzD,IAAjB,2BAA4Bc,GAA5B,IAA+BR,OAAQmD,EAAOnD,SAAWQ,KAGvE,OADApB,EAAM+D,EAAO1D,YAAc8F,EACpB,eAAMnG,GAEjB,IAAK,cACD,IAAMgG,EAAS,eAAQhG,GACjBiB,EAAQ+E,EAAUjC,EAAO1D,YACzB4F,EAAWhF,EAAME,QAAO,SAACC,GAAD,OAAYA,EAAEd,MAAQyD,EAAOzD,OAE3D,OADA0F,EAAUjC,EAAO1D,YAAc4F,EACxBD,EAEX,IAAK,kBACD,IAAMI,EAAS,eAAQpG,GAEvB,cADOoG,EAAUrC,EAAOzD,KACjB8F,EAEX,QACI,OAAOpG,IGtFfuD,UF6B4B,WAA0F,IAAzFvD,EAAwF,uDAA3D0C,EAAcqB,EAA6C,uCACrH,OAAQA,EAAOnB,MAEX,IAAK,gBACD,OAAOmB,EAAOR,UAAU3B,KAAI,SAAA8D,GAAE,kCACvBA,GADuB,IAE1BvE,OAAQ,WAIhB,IAAK,eACD,MAAM,CAAE,CACJb,IAAKyD,EAAO1D,WACZjC,MAAO2F,EAAO3F,MACd+C,OAAQ,QAHZ,mBAIMnB,IAGV,IAAK,wBACD,IAAMqG,EAAWrG,EAAMsG,MAAK,SAAAZ,GAAE,OAAIA,EAAGpF,MAAQyD,EAAOzD,OAIpD,OAHI+F,IACAA,EAASjI,MAAQ2F,EAAO3F,OAErB,YAAI4B,GAEf,IAAK,yBACD,IAAMqG,EAAWrG,EAAMsG,MAAK,SAAAZ,GAAE,OAAIA,EAAGpF,MAAQyD,EAAOzD,OAIpD,OAHI+F,IACAA,EAASlF,OAAS4C,EAAO5C,QAEtB,YAAInB,GAGf,IAAK,kBACD,OAAOA,EAAMmB,QAAO,SAAAuE,GAAE,OAAIA,EAAGpF,MAAQyD,EAAOzD,OAEhD,QACI,OAAON,ME/DNuG,GAAQC,aAAYV,GAAaW,aAAgBC,OAK9DC,OAAOJ,MAAQA,GCTfK,IAASC,OACL,cAAC,IAAMC,WAAP,UACI,cAAC,IAAD,CAAUP,MAAOA,GAAjB,SACI,cAAC,EAAD,QAGRQ,SAASC,eAAe,SAM5B1J,K","file":"static/js/main.5db74d93.chunk.js","sourcesContent":["import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {Box, Button, FormControl, IconButton, TextField} from '@material-ui/core';\r\nimport {AddBox} from '@material-ui/icons';\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n}\r\n\r\nexport const AddItemForm = React.memo(function(props: AddItemFormPropsType) {\r\n\r\n    let [title, setTitle] = useState(\"\")\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItem = () => {\r\n        if (title.trim() !== \"\") {\r\n            props.addItem(title);\r\n            setTitle(\"\");\r\n        } else {\r\n            setError(\"Title is required\");\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.charCode === 13) {\r\n            addItem();\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField variant=\"outlined\"\r\n                   error={!!error}\r\n                   value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   label=\"Title\"\r\n                   helperText={error}\r\n        />\r\n        <IconButton color=\"primary\" onClick={addItem}>\r\n            <AddBox />\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, {ChangeEvent, useState} from 'react';\r\nimport {TextField} from '@material-ui/core';\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo(function (props: EditableSpanPropsType) {\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(props.value);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(props.value);\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        props.onChange(title);\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ?    <TextField value={title} onChange={changeTitle} autoFocus onBlur={activateViewMode} />\r\n        : <span onDoubleClick={activateEditMode}>{props.value}</span>\r\n});\r\n","import React, { ChangeEvent, useCallback } from 'react'\r\nimport { Checkbox, IconButton } from '@material-ui/core'\r\nimport { EditableSpan } from './EditableSpan'\r\nimport { Delete } from '@material-ui/icons'\r\nimport { TaskType } from './Todolist'\r\nimport { useSelector } from 'react-redux'\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    _id: string\r\n    todolistId: string\r\n    title: string\r\n    isDone: boolean\r\n    updateTask: (todolistId: string, _id: string, title: string, isDone: boolean) => void\r\n    removeTask: (todolistId: string, _id: string) => void\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\nconst state = useSelector(state => state);\r\n    \r\n    const onClickHandler = useCallback(() =>\r\n        props.removeTask(props.task.todolistId, props._id),\r\n        [props.task.todolistId, props._id]);\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        props.updateTask(props.task.todolistId,  props._id, props.title, e.currentTarget.checked)\r\n    }, [props.task.todolistId, props._id, props.title ]);\r\n\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        props.updateTask(props.task.todolistId, props._id, newValue, props.isDone )\r\n    }, [props.task.todolistId, props._id, props.isDone]);\r\n\r\n    return <div key={props.task.todolistId} className={props.task.isDone ? 'is-done' : ''}>\r\n        <Checkbox\r\n            checked={props.task.isDone}\r\n            color=\"primary\"\r\n            onChange={onChangeHandler}\r\n        />\r\n\r\n        <EditableSpan value={props.task.title} onChange={onTitleChangeHandler} />\r\n        <IconButton onClick={onClickHandler}>\r\n            <Delete />\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, { useCallback, useState } from 'react'\r\nimport { AddItemForm } from './AddItemForm'\r\nimport { EditableSpan } from './EditableSpan'\r\nimport { Button, IconButton } from '@material-ui/core'\r\nimport { Delete } from '@material-ui/icons'\r\nimport { Task } from './Task'\r\nimport { FilterValuesType } from '../App';\r\nimport { getTodolistsThunk } from '../bll/todolists-reducer'\r\nimport { useSelector } from 'react-redux'\r\nimport { AppRootStateType } from '../bll/store'\r\n\r\nexport type TaskType = {\r\n    todolistId: string\r\n    _id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\n\r\ntype PropsType = {\r\n    _id: string\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    updateTask: (todolistId: string, _id: string, newTitle: string, isDone: boolean) => void\r\n    removeTask: (todolistId: string, _id: string) => void\r\n    removeTodolist: (_id: string) => void\r\n    changeTodolistTitle: (_id: string, newTitle: string) => void\r\n    filter: FilterValuesType\r\n\r\n}\r\n\r\nexport const Todolist = React.memo(function (props: PropsType) {\r\n\r\n    const tasks = useSelector<AppRootStateType, any>(state => state.tasks);\r\n\r\n    const filteredTasks = props.filter === \"active\" ? tasks[props._id].filter((t: any) => t.isDone === false) : props.filter === \"completed\" ? tasks[props._id].filter((t: any) => t.isDone === true) : tasks[props._id];\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(props._id, title)\r\n    }, [props.addTask, props._id])\r\n\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props._id)\r\n    }\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        props.changeTodolistTitle(props._id, title)\r\n    }, [props._id, props.changeTodolistTitle])\r\n\r\n    const onAllClickHandler = useCallback(() =>\r\n        props.changeFilter('all', props._id), [props._id, props.changeFilter])\r\n    const onActiveClickHandler = useCallback(() =>\r\n        props.changeFilter('active', props._id), [props._id, props.changeFilter])\r\n    const onCompletedClickHandler = useCallback(() =>\r\n        props.changeFilter('completed', props._id), [props._id, props.changeFilter])\r\n\r\n    return <div>\r\n        <h3><EditableSpan value={props.title} onChange={changeTodolistTitle} />\r\n            <IconButton onClick={removeTodolist}>\r\n                <Delete />\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask} />\r\n        <div>\r\n            {\r\n                filteredTasks?.map((t: any) => <Task key={t._id} task={t} todolistId={props._id}\r\n                    _id={t._id} title={t.title} isDone={t.isDone}\r\n                    updateTask={props.updateTask}\r\n                    removeTask={props.removeTask}\r\n                />)\r\n            }\r\n        </div>\r\n        <div style={{ paddingTop: '10px' }}>\r\n            <Button variant={props.filter === 'all' ? 'outlined' : 'text'}\r\n                onClick={onAllClickHandler}\r\n                color={'default'}\r\n            >All\r\n            </Button>\r\n            <Button variant={props.filter === 'active' ? 'outlined' : 'text'}\r\n                onClick={onActiveClickHandler}\r\n                color={'primary'}>Active\r\n            </Button>\r\n            <Button variant={props.filter === 'completed' ? 'outlined' : 'text'}\r\n                onClick={onCompletedClickHandler}\r\n                color={'secondary'}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n","import axios from 'axios'\n\nconst instance = axios.create({\n    baseURL: 'https://annatodolist.herokuapp.com/',\n    // withCredentials: true\n})\n\nexport type TodolistType = {\n    id: string\n    title: string\n    addedDate: string\n    order: number\n}\n\nexport type ResponseType<D = {}> = {\n    resultCode: number\n    messages: Array<string>\n    data: D\n}\n\nexport type TaskType = {\n    todoListId: string\n    id: string\n    title: string   \n}\n\nexport const todoApi = {\n    // todolists\n    getTodolists() {\n        const promise = instance.get<TodolistType[]>('todo-lists');\n        return promise;\n    },\n    createTodolist(title: string) {\n        const promise = instance.post<ResponseType<{ item: TodolistType }>>('todo-lists', { title: title });\n        return promise;\n    },\n    deleteTodolist(todolistId: string) {\n        const promise = instance.delete<ResponseType>(`todo-lists/${todolistId}`);\n        return promise;\n    },\n    updateTodolist(todolistId: string, title: string) {\n        const promise = instance.put<ResponseType>(`todo-lists/${todolistId}`, { title: title });\n        return promise;\n    },\n\n    // tasks\n    getTasks(todolistId: string) {\n        return instance.get<any>(`todo-lists/${todolistId}/tasks`);\n    },\n    createTask(todolistId: string, title: string) {\n        return instance.post<ResponseType<{ item: TaskType }>>(`todo-lists/${todolistId}/tasks`, { title: title });\n    },\n    updateTask(todolistId: string, taskId: string, title: string, isDone: boolean) {\n        return instance.put<ResponseType<TaskType>>(`todo-lists/${todolistId}/tasks/${taskId}`, { title: title, isDone: isDone });\n    },\n    deleteTask(todolistId: string, taskId: string) {\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`);\n    }\n}\n","import { TaskType } from '../components/Todolist';\r\nimport { v1 } from 'uuid';\r\nimport { AddTodolistActionType, RemoveTodolistActionType } from './todolists-reducer';\r\nimport { TasksStateType } from '../App';\r\nimport { todoApi } from '../api/todolist-api';\r\nimport { Dispatch } from 'redux';\r\nimport { useSelector } from 'react-redux';\r\n\r\nexport type RemoveTaskActionType = {\r\n    type: 'REMOVE-TASK'\r\n    todolistId: string\r\n    _id: string\r\n}\r\n\r\nexport type AddTaskActionType = {\r\n    type: 'ADD-TASK',\r\n    todolistId: string\r\n    newTask: any\r\n}\r\n\r\nexport type ChangeTaskStatusActionType = {\r\n    type: 'CHANGE-TASK-STATUS'\r\n    todolistId: string\r\n    _id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\n\r\nexport type ChangeTaskTitleActionType = {\r\n    type: 'CHANGE-TASK-TITLE'\r\n    todolistId: string\r\n    _id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\nexport type SetTasksActionType = {\r\n    type: 'SET-TASKS'\r\n    tasks: Array<TaskType>\r\n    todolistId: string\r\n}\r\n\r\ntype ActionsType = RemoveTaskActionType | AddTaskActionType\r\n    | ChangeTaskStatusActionType\r\n    | ChangeTaskTitleActionType\r\n    | AddTodolistActionType\r\n    | RemoveTodolistActionType\r\n    | SetTasksActionType\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionsType): TasksStateType => {\r\n\r\n    switch (action.type) {\r\n        case 'SET-TASKS': {\r\n            const stateCopy = { ...state }\r\n            stateCopy[action.todolistId] = action.tasks\r\n            return stateCopy\r\n        }\r\n        case 'ADD-TASK': {\r\n            const stateCopy = { ...state }\r\n            const newTask: any = action.newTask;\r\n            const tasks = stateCopy[action.todolistId];\r\n            const newTasks = [newTask, ...tasks];\r\n            stateCopy[action.todolistId] = newTasks;\r\n            return stateCopy;\r\n        }\r\n        case 'CHANGE-TASK-TITLE': {\r\n            let todolistTasks = state[action.todolistId];\r\n            let newTasksArray = todolistTasks\r\n                .map(t => t._id === action._id ? { ...t, title: action.title } : t);\r\n\r\n            state[action.todolistId] = newTasksArray;\r\n            return ({ ...state });\r\n        }\r\n        case 'CHANGE-TASK-STATUS': {\r\n            let todolistTasks = state[action.todolistId];\r\n            let newTasksArray = todolistTasks\r\n                .map(t => t._id === action._id ? { ...t, isDone: action.isDone } : t);\r\n\r\n            state[action.todolistId] = newTasksArray;\r\n            return ({ ...state });\r\n        }\r\n        case 'REMOVE-TASK': {\r\n            const stateCopy = { ...state }\r\n            const tasks = stateCopy[action.todolistId];\r\n            const newTasks = tasks.filter((t: any) => t._id !== action._id);\r\n            stateCopy[action.todolistId] = newTasks;\r\n            return stateCopy;\r\n        }\r\n        case 'REMOVE-TODOLIST': {\r\n            const copyState = { ...state };\r\n            delete copyState[action._id];\r\n            return copyState;\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const setTasksAC = (tasks: Array<TaskType>, todolistId: string): SetTasksActionType => {\r\n    return { type: 'SET-TASKS', tasks, todolistId }\r\n}\r\nexport const addTaskAC = (todolistId: string, newTask: any): AddTaskActionType => {\r\n    return { type: 'ADD-TASK', todolistId, newTask }\r\n}\r\nexport const changeTaskStatusAC = (todolistId: string, _id: string, title: string, isDone: boolean): ChangeTaskStatusActionType => {\r\n    return { type: 'CHANGE-TASK-STATUS', todolistId, _id, title, isDone }\r\n}\r\nexport const changeTaskTitleAC = (todolistId: string, _id: string, title: string, isDone: boolean): ChangeTaskTitleActionType => {\r\n    return { type: 'CHANGE-TASK-TITLE', todolistId, _id, title, isDone }\r\n}\r\nexport const removeTaskAC = (todolistId: string, _id: string): RemoveTaskActionType => {\r\n    return { type: 'REMOVE-TASK', todolistId, _id }\r\n}\r\n\r\n//thunk\r\n// get\r\nexport const getTasksTC = (_id: string) => async (dispatch: Dispatch<ActionsType>) => {\r\n    let res = await todoApi.getTasks(_id)\r\n    const tasks = res.data\r\n    const action = setTasksAC(tasks, _id)\r\n    dispatch(action)\r\n}\r\n\r\n// post\r\nexport const addTasksTC = (todolistId: string, title: string) => async (dispatch: Dispatch<ActionsType>) => {\r\n    await todoApi.createTask(todolistId, title).then(response =>\r\n        dispatch(addTaskAC(todolistId, response.data))).catch(err => console.log(err))\r\n}\r\n\r\n// put\r\nexport const updateTasksTC = (todolistId: string, _id: string, title: string, isDone: boolean) =>\r\n    async (dispatch: any) => {\r\n        await todoApi.updateTask(todolistId, _id, title, isDone).then((response: any )=> {\r\n            dispatch(changeTaskTitleAC(todolistId, _id, title, isDone))\r\n            dispatch(changeTaskStatusAC(todolistId, _id, title, isDone))\r\n        }).catch(err => console.log(err))\r\n    }\r\n\r\n// delete\r\nexport const deleteTasksTC = (todolistId: string, taskId: string) => async (dispatch: Dispatch<ActionsType>) => {\r\n    let res = await todoApi.deleteTask(todolistId, taskId)\r\n    dispatch(removeTaskAC(todolistId, taskId))\r\n}\r\n\r\n\r\n","import { Dispatch } from 'redux';\r\nimport { v1 } from 'uuid';\r\nimport { todoApi } from '../api/todolist-api';\r\nimport { FilterValuesType, TodolistType } from '../App';\r\nimport { getTasksTC } from './tasks-reducer';\r\n\r\nexport type RemoveTodolistActionType = {\r\n    type: 'REMOVE-TODOLIST',\r\n    _id: string\r\n}\r\nexport type AddTodolistActionType = {\r\n    type: 'ADD-TODOLIST',\r\n    title: string\r\n    todolistId: string\r\n}\r\nexport type ChangeTodolistTitleActionType = {\r\n    type: 'CHANGE-TODOLIST-TITLE',\r\n    _id: string\r\n    title: string\r\n}\r\nexport type ChangeTodolistFilterActionType = {\r\n    type: 'CHANGE-TODOLIST-FILTER',\r\n    _id: string\r\n    filter: FilterValuesType\r\n}\r\n\r\nexport type SetTodolistsActionType = {\r\n    type: 'SET-TODOLISTS'\r\n    todolists: Array<TodolistType>\r\n}\r\n\r\ntype ActionsType = RemoveTodolistActionType | AddTodolistActionType\r\n    | ChangeTodolistTitleActionType\r\n    | ChangeTodolistFilterActionType\r\n    | SetTodolistsActionType\r\n\r\nconst initialState: Array<TodolistType> = []\r\n\r\nexport const todolistsReducer = (state: Array<TodolistType> = initialState, action: ActionsType): Array<TodolistType> => {\r\n    switch (action.type) {\r\n        // get\r\n        case 'SET-TODOLISTS': {\r\n            return action.todolists.map(tl => ({\r\n                ...tl,\r\n                filter: 'all'\r\n            }))\r\n        }\r\n        // post\r\n        case 'ADD-TODOLIST': {\r\n            return [{\r\n                _id: action.todolistId,\r\n                title: action.title,\r\n                filter: 'all'\r\n            }, ...state]\r\n        }\r\n        // update (put)\r\n        case 'CHANGE-TODOLIST-TITLE': {\r\n            const todolist = state.find(tl => tl._id === action._id);\r\n            if (todolist) {\r\n                todolist.title = action.title;\r\n            }\r\n            return [...state]\r\n        }\r\n        case 'CHANGE-TODOLIST-FILTER': {\r\n            const todolist = state.find(tl => tl._id === action._id);\r\n            if (todolist) {\r\n                todolist.filter = action.filter;\r\n            }\r\n            return [...state]\r\n        }\r\n        //delete\r\n        case 'REMOVE-TODOLIST': {\r\n            return state.filter(tl => tl._id !== action._id)\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const setTodolistsAC = (todolists: Array<TodolistType>): SetTodolistsActionType => {\r\n    return { type: 'SET-TODOLISTS', todolists }\r\n}\r\n\r\nexport const addTodolistAC = (title: string): AddTodolistActionType => {\r\n    return { type: 'ADD-TODOLIST', title: title, todolistId: v1() }\r\n}\r\n\r\nexport const changeTodolistTitleAC = (todolistId: string, title: string): ChangeTodolistTitleActionType => {\r\n    return { type: 'CHANGE-TODOLIST-TITLE', _id: todolistId, title: title }\r\n}\r\n\r\nexport const changeTodolistFilterAC = (id: string, filter: FilterValuesType): ChangeTodolistFilterActionType => {\r\n    return { type: 'CHANGE-TODOLIST-FILTER', _id: id, filter: filter }\r\n}\r\n\r\nexport const removeTodolistAC = (todolistId: string): RemoveTodolistActionType => {\r\n    return { type: 'REMOVE-TODOLIST', _id: todolistId }\r\n}\r\n\r\n//thunk\r\n// get\r\nexport const getTodolistsThunk = () => async (dispatch: Dispatch) => {\r\n    const res = await todoApi.getTodolists()\r\n    //@ts-ignore\r\n    res.data.map((el: any) => dispatch(getTasksTC(el._id)))\r\n    //@ts-ignore\r\n    dispatch(setTodolistsAC(res.data))\r\n}\r\n\r\n// post\r\nexport const addTodolistsThunk = (title: string) => async (dispatch: Dispatch<ActionsType>) => {\r\n    let response = await todoApi.createTodolist(title)\r\n    dispatch(addTodolistAC(title))\r\n}\r\n\r\n// put\r\nexport const updateTodolistsThunk = (todolistId: string, title: string) => async (dispatch: Dispatch<ActionsType>) => {\r\n    let response = await todoApi.updateTodolist(todolistId, title)\r\n    dispatch(changeTodolistTitleAC(todolistId, title))\r\n}\r\n\r\n// delete\r\nexport const deleteTodolistsThunk = (todolistId: string) => async (dispatch: Dispatch<ActionsType>) => {\r\n    let response = await todoApi.deleteTodolist(todolistId)\r\n    dispatch(removeTodolistAC(todolistId))\r\n}\r\n","import React, { useCallback, useEffect } from 'react'\r\nimport './App.css';\r\nimport './styles-background.scss';\r\nimport { TaskType, Todolist } from './components/Todolist';\r\nimport { v1 } from 'uuid';\r\nimport { AddItemForm } from './components/AddItemForm';\r\nimport { AppBar, Button, Container, Grid, IconButton, Paper, Toolbar, Typography } from '@material-ui/core';\r\nimport { Menu } from '@material-ui/icons';\r\nimport {\r\n    addTodolistsThunk,\r\n    changeTodolistFilterAC,\r\n    deleteTodolistsThunk,\r\n    getTodolistsThunk,\r\n    updateTodolistsThunk\r\n} from './bll/todolists-reducer';\r\nimport { addTasksTC, deleteTasksTC, updateTasksTC } from './bll/tasks-reducer';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { AppRootStateType } from './bll/store'\r\n\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\";\r\nexport type TodolistType = {\r\n    _id: string\r\n    title: string\r\n    filter: FilterValuesType\r\n}\r\n\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\nfunction App() {\r\n\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        dispatch(getTodolistsThunk());\r\n    }, [dispatch])\r\n\r\n    let todolistId1 = v1();\r\n    let todolistId2 = v1();\r\n\r\n\r\n    // tasks\r\n    const addTask = useCallback((todolistId: string, title: string) => {\r\n        dispatch(addTasksTC(todolistId, title));\r\n    }, [dispatch]);\r\n\r\n    const updateTask = useCallback((todolistId: string, id: string, title:string, isDone: boolean) => {\r\n        dispatch(updateTasksTC(todolistId, id, title, isDone));\r\n    }, [dispatch]);\r\n\r\n    const removeTask = useCallback((todolistId: string, taskId: string) => {\r\n        dispatch(deleteTasksTC(todolistId, taskId));\r\n    }, [dispatch]);\r\n\r\n\r\n    const changeFilter = useCallback(function (value: FilterValuesType, todolistId: string) {\r\n        const action = changeTodolistFilterAC(todolistId, value);\r\n        dispatch(action);\r\n    }, []);\r\n\r\n    // todolist\r\n    const addTodolist = useCallback((title: string) => {\r\n        dispatch(addTodolistsThunk(title));\r\n    }, [dispatch]);\r\n\r\n    const removeTodolist = useCallback((todolistId: string) => {\r\n        dispatch(deleteTodolistsThunk(todolistId));\r\n    }, [dispatch]);\r\n\r\n    const changeTodolistTitle = useCallback((todolistId: string, title: string) => {\r\n        dispatch(updateTodolistsThunk(todolistId, title));\r\n    }, [dispatch]);\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"primary\" aria-label=\"menu\">\r\n                        <Menu />\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\" >\r\n                        TaskManager\r\n                    </Typography>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Grid container style={{ padding: \"20px\"}}>\r\n                    <AddItemForm addItem={addTodolist} />\r\n                </Grid>\r\n                <Grid container spacing={3}>\r\n                    {\r\n                        todolists.map(tl => {\r\n                            let allTodolistTasks = tasks[tl._id];\r\n\r\n                            return <Grid item key={tl._id}>\r\n                                <Paper style={{ padding: \"10px\" }}>\r\n                                    <Todolist\r\n                                        _id={tl._id}\r\n                                        title={tl.title}\r\n                                        tasks={allTodolistTasks}\r\n                                        removeTask={removeTask}\r\n                                        changeFilter={changeFilter}\r\n                                        addTask={addTask}\r\n                                        updateTask={updateTask}\r\n                                        filter={tl.filter}\r\n                                        removeTodolist={removeTodolist}\r\n                                        changeTodolistTitle={changeTodolistTitle}\r\n                                    />\r\n                                </Paper>\r\n                            </Grid>\r\n                        })\r\n                    }\r\n                </Grid>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import {tasksReducer} from './tasks-reducer';\r\nimport {todolistsReducer} from './todolists-reducer';\r\nimport {applyMiddleware, combineReducers, createStore} from 'redux';\r\nimport thunk from 'redux-thunk';\r\n// import logger from 'redux-logger';\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer\r\n})\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk));\r\n\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport App from './App';\nimport {Provider} from 'react-redux';\nimport {store} from './bll/store';\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}