[{"/home/hannamintel/MY FILES/GIT/TaskManager_App/src/index.tsx":"1","/home/hannamintel/MY FILES/GIT/TaskManager_App/src/reportWebVitals.ts":"2","/home/hannamintel/MY FILES/GIT/TaskManager_App/src/App.tsx":"3","/home/hannamintel/MY FILES/GIT/TaskManager_App/src/api/todolist-api.ts":"4","/home/hannamintel/MY FILES/GIT/TaskManager_App/src/components/AddItemForm.tsx":"5","/home/hannamintel/MY FILES/GIT/TaskManager_App/src/components/EditableSpan.tsx":"6","/home/hannamintel/MY FILES/GIT/TaskManager_App/src/bll/store.ts":"7","/home/hannamintel/MY FILES/GIT/TaskManager_App/src/bll/todolists-reducer.ts":"8","/home/hannamintel/MY FILES/GIT/TaskManager_App/src/bll/tasks-reducer.ts":"9","/home/hannamintel/MY FILES/GIT/TaskManager_App/src/components/Todolist.tsx":"10","/home/hannamintel/MY FILES/GIT/TaskManager_App/src/components/Task.tsx":"11"},{"size":639,"mtime":1667125433000,"results":"12","hashOfConfig":"13"},{"size":425,"mtime":1667125433000,"results":"14","hashOfConfig":"13"},{"size":5050,"mtime":1667162504000,"results":"15","hashOfConfig":"13"},{"size":2362,"mtime":1667915839925,"results":"16","hashOfConfig":"13"},{"size":1435,"mtime":1667156525000,"results":"17","hashOfConfig":"13"},{"size":952,"mtime":1667125433000,"results":"18","hashOfConfig":"13"},{"size":530,"mtime":1667811537483,"results":"19","hashOfConfig":"13"},{"size":4057,"mtime":1667915456173,"results":"20","hashOfConfig":"13"},{"size":5082,"mtime":1667915960768,"results":"21","hashOfConfig":"13"},{"size":3804,"mtime":1667161808000,"results":"22","hashOfConfig":"13"},{"size":1687,"mtime":1667162578000,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"ao8a0q",{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"26"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"34","messages":"35","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"26"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"43","messages":"44","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"45","messages":"46","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"26"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"51"},"/home/hannamintel/MY FILES/GIT/TaskManager_App/src/index.tsx",[],["52","53"],"/home/hannamintel/MY FILES/GIT/TaskManager_App/src/reportWebVitals.ts",[],"/home/hannamintel/MY FILES/GIT/TaskManager_App/src/App.tsx",["54","55","56","57","58","59","60","61","62","63","64","65","66","67","68","69","70"],"import React, { useCallback, useEffect, useReducer, useState } from 'react'\r\nimport './App.css';\r\nimport { TaskType, Todolist } from './components/Todolist';\r\nimport { v1 } from 'uuid';\r\nimport { AddItemForm } from './components/AddItemForm';\r\nimport { AppBar, Button, Container, Grid, IconButton, Paper, Toolbar, Typography } from '@material-ui/core';\r\nimport { Menu } from '@material-ui/icons';\r\nimport {\r\n    addTodolistAC,\r\n    addTodolistsThunk,\r\n    changeTodolistFilterAC,\r\n    changeTodolistTitleAC,\r\n    deleteTodolistsThunk,\r\n    getTodolistsThunk,\r\n    removeTodolistAC,\r\n    setTodolistsAC,\r\n    todolistsReducer,\r\n    updateTodolistsThunk\r\n} from './bll/todolists-reducer';\r\nimport { addTaskAC, addTasksTC, changeTaskStatusAC, changeTaskTitleAC, deleteTasksTC, getTasksTC, removeTaskAC, tasksReducer, updateTasksTC } from './bll/tasks-reducer';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { AppRootStateType } from './bll/store';\r\nimport { todoApi } from './api/todolist-api';\r\n\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\";\r\nexport type TodolistType = {\r\n    _id: string\r\n    title: string\r\n    filter: FilterValuesType\r\n}\r\n\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\nfunction App() {\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        dispatch(getTodolistsThunk());\r\n    }, [dispatch])\r\n\r\n    let todolistId1 = v1();\r\n    let todolistId2 = v1();\r\n\r\n\r\n    // tasks\r\n    const addTask = useCallback( (todolistId: string, title: string) => {\r\n        dispatch(addTasksTC(todolistId, title));\r\n    }, [dispatch]);\r\n\r\n    const changeTaskTitle = useCallback((todolistId: string, taskId: string) => {\r\n        dispatch(updateTasksTC(todolistId, taskId));\r\n    }, [dispatch]);\r\n\r\n    const removeTask = useCallback((todolistId: string, taskId: string) => {\r\n        dispatch(deleteTasksTC(todolistId, taskId));\r\n    }, [dispatch]);\r\n\r\n\r\n    const changeStatus = useCallback(function (id: string, isDone: boolean, todolistId: string) {\r\n        const action = changeTaskStatusAC(id, isDone, todolistId);\r\n        dispatch(action);\r\n    }, []);\r\n\r\n    const changeFilter = useCallback(function (value: FilterValuesType, todolistId: string) {\r\n        const action = changeTodolistFilterAC(todolistId, value);\r\n        dispatch(action);\r\n    }, []);\r\n\r\n    // todolist\r\n    const addTodolist = useCallback((title: string) => {\r\n        dispatch(addTodolistsThunk(title));\r\n    }, [dispatch]);\r\n\r\n    const removeTodolist = useCallback((todolistId: string) => {\r\n        dispatch(deleteTodolistsThunk(todolistId));\r\n    }, [dispatch]);\r\n\r\n    const changeTodolistTitle = useCallback((todolistId: string, title: string) => {\r\n        dispatch(updateTodolistsThunk(todolistId, title));\r\n    }, [dispatch]);\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            {/* <Error /> */}\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu />\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        News\r\n                    </Typography>\r\n                    <Button color=\"inherit\">Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Grid container style={{ padding: \"20px\" }}>\r\n                    <AddItemForm addItem={addTodolist} />\r\n                </Grid>\r\n                <Grid container spacing={3}>\r\n                    {\r\n                        todolists.map(tl => {\r\n                            let allTodolistTasks = tasks[tl._id];\r\n\r\n                            return <Grid item key={tl._id}>\r\n                                <Paper style={{ padding: \"10px\" }}>\r\n                                    <Todolist\r\n                                        _id={tl._id}\r\n                                        title={tl.title}\r\n                                        tasks={allTodolistTasks}\r\n                                        removeTask={removeTask}\r\n                                        changeFilter={changeFilter}\r\n                                        addTask={addTask}\r\n                                        changeTaskStatus={changeStatus}\r\n                                        filter={tl.filter}\r\n                                        removeTodolist={removeTodolist}\r\n                                        changeTaskTitle={changeTaskTitle}\r\n                                        changeTodolistTitle={changeTodolistTitle}\r\n                                    />\r\n                                </Paper>\r\n                            </Grid>\r\n                        })\r\n                    }\r\n                </Grid>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","/home/hannamintel/MY FILES/GIT/TaskManager_App/src/api/todolist-api.ts",["71"],"/home/hannamintel/MY FILES/GIT/TaskManager_App/src/components/AddItemForm.tsx",["72","73","74"],"import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {Box, Button, FormControl, IconButton, TextField} from '@material-ui/core';\r\nimport {AddBox} from '@material-ui/icons';\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n}\r\n\r\nexport const AddItemForm = React.memo(function(props: AddItemFormPropsType) {\r\n\r\n    let [title, setTitle] = useState(\"\")\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItem = () => {\r\n        if (title.trim() !== \"\") {\r\n            props.addItem(title);\r\n            setTitle(\"\");\r\n        } else {\r\n            setError(\"Title is required\");\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.charCode === 13) {\r\n            addItem();\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField variant=\"outlined\"\r\n                   error={!!error}\r\n                   value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   label=\"Title\"\r\n                   helperText={error}\r\n        />\r\n        <IconButton color=\"primary\" onClick={addItem}>\r\n            <AddBox />\r\n        </IconButton>\r\n    </div>\r\n})\r\n","/home/hannamintel/MY FILES/GIT/TaskManager_App/src/components/EditableSpan.tsx",[],"/home/hannamintel/MY FILES/GIT/TaskManager_App/src/bll/store.ts",[],"/home/hannamintel/MY FILES/GIT/TaskManager_App/src/bll/todolists-reducer.ts",["75","76","77"],"/home/hannamintel/MY FILES/GIT/TaskManager_App/src/bll/tasks-reducer.ts",["78","79","80"],"/home/hannamintel/MY FILES/GIT/TaskManager_App/src/components/Todolist.tsx",["81","82","83","84","85","86","87"],"import React, {useCallback} from 'react'\r\nimport {AddItemForm} from './AddItemForm'\r\nimport {EditableSpan} from './EditableSpan'\r\nimport {Button, IconButton} from '@material-ui/core'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {Task} from './Task'\r\nimport {FilterValuesType} from '../App';\r\nimport { getTodolistsThunk } from '../bll/todolists-reducer'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { AppRootStateType } from '../bll/store'\r\n\r\nexport type TaskType = {\r\n    todolistId: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\n\r\ntype PropsType = {\r\n    _id: string\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (_id: string, isDone: boolean, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    removeTodolist: (_id: string) => void\r\n    changeTodolistTitle: (_id: string, newTitle: string) => void\r\n    filter: FilterValuesType\r\n\r\n}\r\n\r\nexport const Todolist = React.memo(function (props: PropsType) {\r\n\r\n    const tasks = useSelector<AppRootStateType, any>(state => state.tasks);\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(props._id, title)\r\n    }, [props.addTask, props._id])\r\n\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props._id)\r\n    }\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        props.changeTodolistTitle(props._id, title)\r\n    }, [props._id, props.changeTodolistTitle])\r\n\r\n    const onAllClickHandler = useCallback(() => props.changeFilter('all', props._id), [props._id, props.changeFilter])\r\n    const onActiveClickHandler = useCallback(() => props.changeFilter('active', props._id), [props._id, props.changeFilter])\r\n    const onCompletedClickHandler = useCallback(() => props.changeFilter('completed', props._id), [props._id, props.changeFilter])\r\n\r\n    // let tasksForTodolist = tasks;\r\n\r\n    // if (props.filter === 'active') {\r\n    //     tasksForTodolist = props.tasks.filter(t => t.isDone === false)\r\n    // }\r\n    // if (props.filter === 'completed') {\r\n    //     tasksForTodolist = props.tasks.filter(t => t.isDone === true)\r\n    // }\r\n\r\n    return <div>\r\n        <h3><EditableSpan value={props.title} onChange={changeTodolistTitle}/>\r\n            <IconButton onClick={removeTodolist}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask}/>\r\n        <div>\r\n            {\r\n                tasks[props._id]?.map((t:any) => <Task key={t._id} task={t} todolistId={props._id}\r\n                                            taskId={t._id}\r\n                                          removeTask={props.removeTask}\r\n                                          changeTaskTitle={props.changeTaskTitle}\r\n                                          changeTaskStatus={props.changeTaskStatus}\r\n                    />)\r\n            }\r\n        </div>\r\n        <div style={{paddingTop: '10px'}}>\r\n            <Button variant={props.filter === 'all' ? 'outlined' : 'text'}\r\n                    onClick={onAllClickHandler}\r\n                    color={'default'}\r\n            >All\r\n            </Button>\r\n            <Button variant={props.filter === 'active' ? 'outlined' : 'text'}\r\n                    onClick={onActiveClickHandler}\r\n                    color={'primary'}>Active\r\n            </Button>\r\n            <Button variant={props.filter === 'completed' ? 'outlined' : 'text'}\r\n                    onClick={onCompletedClickHandler}\r\n                    color={'secondary'}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n\r\n","/home/hannamintel/MY FILES/GIT/TaskManager_App/src/components/Task.tsx",["88","89","90"],"import React, { ChangeEvent, useCallback } from 'react'\r\nimport { Checkbox, IconButton } from '@material-ui/core'\r\nimport { EditableSpan } from './EditableSpan'\r\nimport { Delete } from '@material-ui/icons'\r\nimport { TaskType } from './Todolist'\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    taskId: string\r\n    todolistId: string\r\n    changeTaskStatus: (id: string, isDone: boolean, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (todolistId: string, taskId: string) => void\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n\r\n    const onClickHandler = useCallback(() =>\r\n        props.removeTask(props.task.todolistId, props.taskId),\r\n        [props.task.todolistId, props.taskId]);\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        props.changeTaskStatus(props.task.todolistId, newIsDoneValue, props.taskId)\r\n    }, [props.task.todolistId, props.taskId]);\r\n\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        props.changeTaskTitle(props.task.todolistId, newValue, props.taskId)\r\n    }, [props.task.todolistId, props.taskId]);\r\n\r\n    return <div key={props.task.todolistId} className={props.task.isDone ? 'is-done' : ''}>\r\n        <Checkbox\r\n            checked={props.task.isDone}\r\n            color=\"primary\"\r\n            onChange={onChangeHandler}\r\n        />\r\n\r\n        <EditableSpan value={props.task.title} onChange={onTitleChangeHandler} />\r\n        <IconButton onClick={onClickHandler}>\r\n            <Delete />\r\n        </IconButton>\r\n    </div>\r\n})\r\n",["91","92"],{"ruleId":"93","replacedBy":"94"},{"ruleId":"95","replacedBy":"96"},{"ruleId":"97","severity":1,"message":"98","line":1,"column":41,"nodeType":"99","messageId":"100","endLine":1,"endColumn":51},{"ruleId":"97","severity":1,"message":"101","line":1,"column":53,"nodeType":"99","messageId":"100","endLine":1,"endColumn":61},{"ruleId":"97","severity":1,"message":"102","line":9,"column":5,"nodeType":"99","messageId":"100","endLine":9,"endColumn":18},{"ruleId":"97","severity":1,"message":"103","line":12,"column":5,"nodeType":"99","messageId":"100","endLine":12,"endColumn":26},{"ruleId":"97","severity":1,"message":"104","line":15,"column":5,"nodeType":"99","messageId":"100","endLine":15,"endColumn":21},{"ruleId":"97","severity":1,"message":"105","line":16,"column":5,"nodeType":"99","messageId":"100","endLine":16,"endColumn":19},{"ruleId":"97","severity":1,"message":"106","line":17,"column":5,"nodeType":"99","messageId":"100","endLine":17,"endColumn":21},{"ruleId":"97","severity":1,"message":"107","line":20,"column":10,"nodeType":"99","messageId":"100","endLine":20,"endColumn":19},{"ruleId":"97","severity":1,"message":"108","line":20,"column":53,"nodeType":"99","messageId":"100","endLine":20,"endColumn":70},{"ruleId":"97","severity":1,"message":"109","line":20,"column":87,"nodeType":"99","messageId":"100","endLine":20,"endColumn":97},{"ruleId":"97","severity":1,"message":"110","line":20,"column":99,"nodeType":"99","messageId":"100","endLine":20,"endColumn":111},{"ruleId":"97","severity":1,"message":"111","line":20,"column":113,"nodeType":"99","messageId":"100","endLine":20,"endColumn":125},{"ruleId":"97","severity":1,"message":"112","line":23,"column":10,"nodeType":"99","messageId":"100","endLine":23,"endColumn":17},{"ruleId":"97","severity":1,"message":"113","line":45,"column":9,"nodeType":"99","messageId":"100","endLine":45,"endColumn":20},{"ruleId":"97","severity":1,"message":"114","line":46,"column":9,"nodeType":"99","messageId":"100","endLine":46,"endColumn":20},{"ruleId":"115","severity":1,"message":"116","line":66,"column":8,"nodeType":"117","endLine":66,"endColumn":10,"suggestions":"118"},{"ruleId":"115","severity":1,"message":"116","line":71,"column":8,"nodeType":"117","endLine":71,"endColumn":10,"suggestions":"119"},{"ruleId":"97","severity":1,"message":"120","line":48,"column":6,"nodeType":"99","messageId":"100","endLine":48,"endColumn":25},{"ruleId":"97","severity":1,"message":"121","line":2,"column":9,"nodeType":"99","messageId":"100","endLine":2,"endColumn":12},{"ruleId":"97","severity":1,"message":"122","line":2,"column":14,"nodeType":"99","messageId":"100","endLine":2,"endColumn":20},{"ruleId":"97","severity":1,"message":"123","line":2,"column":22,"nodeType":"99","messageId":"100","endLine":2,"endColumn":33},{"ruleId":"97","severity":1,"message":"124","line":111,"column":9,"nodeType":"99","messageId":"100","endLine":111,"endColumn":17},{"ruleId":"97","severity":1,"message":"124","line":117,"column":9,"nodeType":"99","messageId":"100","endLine":117,"endColumn":17},{"ruleId":"97","severity":1,"message":"124","line":123,"column":9,"nodeType":"99","messageId":"100","endLine":123,"endColumn":17},{"ruleId":"97","severity":1,"message":"125","line":131,"column":9,"nodeType":"99","messageId":"100","endLine":131,"endColumn":12},{"ruleId":"97","severity":1,"message":"125","line":138,"column":13,"nodeType":"99","messageId":"100","endLine":138,"endColumn":16},{"ruleId":"97","severity":1,"message":"125","line":144,"column":9,"nodeType":"99","messageId":"100","endLine":144,"endColumn":12},{"ruleId":"97","severity":1,"message":"126","line":8,"column":10,"nodeType":"99","messageId":"100","endLine":8,"endColumn":27},{"ruleId":"97","severity":1,"message":"127","line":9,"column":10,"nodeType":"99","messageId":"100","endLine":9,"endColumn":21},{"ruleId":"115","severity":1,"message":"128","line":39,"column":8,"nodeType":"117","endLine":39,"endColumn":34,"suggestions":"129"},{"ruleId":"115","severity":1,"message":"128","line":46,"column":8,"nodeType":"117","endLine":46,"endColumn":46,"suggestions":"130"},{"ruleId":"115","severity":1,"message":"128","line":48,"column":87,"nodeType":"117","endLine":48,"endColumn":118,"suggestions":"131"},{"ruleId":"115","severity":1,"message":"128","line":49,"column":93,"nodeType":"117","endLine":49,"endColumn":124,"suggestions":"132"},{"ruleId":"115","severity":1,"message":"128","line":50,"column":99,"nodeType":"117","endLine":50,"endColumn":130,"suggestions":"133"},{"ruleId":"115","severity":1,"message":"128","line":19,"column":9,"nodeType":"117","endLine":19,"endColumn":46,"suggestions":"134"},{"ruleId":"115","severity":1,"message":"128","line":24,"column":8,"nodeType":"117","endLine":24,"endColumn":45,"suggestions":"135"},{"ruleId":"115","severity":1,"message":"128","line":28,"column":8,"nodeType":"117","endLine":28,"endColumn":45,"suggestions":"136"},{"ruleId":"93","replacedBy":"137"},{"ruleId":"95","replacedBy":"138"},"no-native-reassign",["139"],"no-negated-in-lhs",["140"],"@typescript-eslint/no-unused-vars","'useReducer' is defined but never used.","Identifier","unusedVar","'useState' is defined but never used.","'addTodolistAC' is defined but never used.","'changeTodolistTitleAC' is defined but never used.","'removeTodolistAC' is defined but never used.","'setTodolistsAC' is defined but never used.","'todolistsReducer' is defined but never used.","'addTaskAC' is defined but never used.","'changeTaskTitleAC' is defined but never used.","'getTasksTC' is defined but never used.","'removeTaskAC' is defined but never used.","'tasksReducer' is defined but never used.","'todoApi' is defined but never used.","'todolistId1' is assigned a value but never used.","'todolistId2' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useCallback has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["141"],["142"],"'UpdateTaskModelType' is defined but never used.","'Box' is defined but never used.","'Button' is defined but never used.","'FormControl' is defined but never used.","'response' is assigned a value but never used.","'res' is assigned a value but never used.","'getTodolistsThunk' is defined but never used.","'useDispatch' is defined but never used.","React Hook useCallback has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useCallback call and refer to those specific props inside useCallback.",["143"],["144"],["145"],["146"],["147"],["148"],["149"],["150"],["139"],["140"],"no-global-assign","no-unsafe-negation",{"desc":"151","fix":"152"},{"desc":"151","fix":"153"},{"desc":"154","fix":"155"},{"desc":"154","fix":"156"},{"desc":"154","fix":"157"},{"desc":"154","fix":"158"},{"desc":"154","fix":"159"},{"desc":"154","fix":"160"},{"desc":"154","fix":"161"},{"desc":"154","fix":"162"},"Update the dependencies array to be: [dispatch]",{"range":"163","text":"164"},{"range":"165","text":"164"},"Update the dependencies array to be: [props]",{"range":"166","text":"167"},{"range":"168","text":"167"},{"range":"169","text":"167"},{"range":"170","text":"167"},{"range":"171","text":"167"},{"range":"172","text":"167"},{"range":"173","text":"167"},{"range":"174","text":"167"},[2323,2325],"[dispatch]",[2527,2529],[1401,1427],"[props]",[1642,1680],[1771,1802],[1897,1928],[2029,2060],[747,784],[1017,1054],[1215,1252]]