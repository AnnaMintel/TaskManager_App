[{"/home/hannamintel/MY FILES/GIT/TaskManager_App/src/index.tsx":"1","/home/hannamintel/MY FILES/GIT/TaskManager_App/src/reportWebVitals.ts":"2","/home/hannamintel/MY FILES/GIT/TaskManager_App/src/App.tsx":"3","/home/hannamintel/MY FILES/GIT/TaskManager_App/src/api/todolist-api.ts":"4","/home/hannamintel/MY FILES/GIT/TaskManager_App/src/components/AddItemForm.tsx":"5","/home/hannamintel/MY FILES/GIT/TaskManager_App/src/components/EditableSpan.tsx":"6","/home/hannamintel/MY FILES/GIT/TaskManager_App/src/bll/store.ts":"7","/home/hannamintel/MY FILES/GIT/TaskManager_App/src/bll/todolists-reducer.ts":"8","/home/hannamintel/MY FILES/GIT/TaskManager_App/src/bll/tasks-reducer.ts":"9","/home/hannamintel/MY FILES/GIT/TaskManager_App/src/components/Todolist.tsx":"10","/home/hannamintel/MY FILES/GIT/TaskManager_App/src/components/Task.tsx":"11"},{"size":639,"mtime":1667125433000,"results":"12","hashOfConfig":"13"},{"size":425,"mtime":1667125433000,"results":"14","hashOfConfig":"13"},{"size":4733,"mtime":1667927316248,"results":"15","hashOfConfig":"13"},{"size":2298,"mtime":1667927662267,"results":"16","hashOfConfig":"13"},{"size":1435,"mtime":1667156525000,"results":"17","hashOfConfig":"13"},{"size":911,"mtime":1667927808458,"results":"18","hashOfConfig":"13"},{"size":530,"mtime":1667811537483,"results":"19","hashOfConfig":"13"},{"size":4057,"mtime":1667915456173,"results":"20","hashOfConfig":"13"},{"size":5066,"mtime":1667928988525,"results":"21","hashOfConfig":"13"},{"size":3508,"mtime":1667928372371,"results":"22","hashOfConfig":"13"},{"size":1687,"mtime":1667162578000,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"ao8a0q",{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"31","messages":"32","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"33","messages":"34","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"26"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"26"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"45","messages":"46","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"47","messages":"48","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"50"},"/home/hannamintel/MY FILES/GIT/TaskManager_App/src/index.tsx",[],["51","52"],"/home/hannamintel/MY FILES/GIT/TaskManager_App/src/reportWebVitals.ts",[],"/home/hannamintel/MY FILES/GIT/TaskManager_App/src/App.tsx",["53","54","55","56","57"],"/home/hannamintel/MY FILES/GIT/TaskManager_App/src/api/todolist-api.ts",["58"],"/home/hannamintel/MY FILES/GIT/TaskManager_App/src/components/AddItemForm.tsx",["59","60","61"],"import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {Box, Button, FormControl, IconButton, TextField} from '@material-ui/core';\r\nimport {AddBox} from '@material-ui/icons';\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n}\r\n\r\nexport const AddItemForm = React.memo(function(props: AddItemFormPropsType) {\r\n\r\n    let [title, setTitle] = useState(\"\")\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItem = () => {\r\n        if (title.trim() !== \"\") {\r\n            props.addItem(title);\r\n            setTitle(\"\");\r\n        } else {\r\n            setError(\"Title is required\");\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.charCode === 13) {\r\n            addItem();\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField variant=\"outlined\"\r\n                   error={!!error}\r\n                   value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   label=\"Title\"\r\n                   helperText={error}\r\n        />\r\n        <IconButton color=\"primary\" onClick={addItem}>\r\n            <AddBox />\r\n        </IconButton>\r\n    </div>\r\n})\r\n","/home/hannamintel/MY FILES/GIT/TaskManager_App/src/components/EditableSpan.tsx",[],"/home/hannamintel/MY FILES/GIT/TaskManager_App/src/bll/store.ts",[],"/home/hannamintel/MY FILES/GIT/TaskManager_App/src/bll/todolists-reducer.ts",["62","63","64"],"import { Dispatch } from 'redux';\r\nimport { v1 } from 'uuid';\r\nimport { todoApi } from '../api/todolist-api';\r\nimport { FilterValuesType, TodolistType } from '../App';\r\nimport { getTasksTC } from './tasks-reducer';\r\n\r\nexport type RemoveTodolistActionType = {\r\n    type: 'REMOVE-TODOLIST',\r\n    _id: string\r\n}\r\nexport type AddTodolistActionType = {\r\n    type: 'ADD-TODOLIST',\r\n    title: string\r\n    todolistId: string\r\n}\r\nexport type ChangeTodolistTitleActionType = {\r\n    type: 'CHANGE-TODOLIST-TITLE',\r\n    _id: string\r\n    title: string\r\n}\r\nexport type ChangeTodolistFilterActionType = {\r\n    type: 'CHANGE-TODOLIST-FILTER',\r\n    _id: string\r\n    filter: FilterValuesType\r\n}\r\n\r\nexport type SetTodolistsActionType = {\r\n    type: 'SET-TODOLISTS'\r\n    todolists: Array<TodolistType>\r\n}\r\n\r\ntype ActionsType = RemoveTodolistActionType | AddTodolistActionType\r\n    | ChangeTodolistTitleActionType\r\n    | ChangeTodolistFilterActionType\r\n    | SetTodolistsActionType\r\n\r\nconst initialState: Array<TodolistType> = []\r\n\r\nexport const todolistsReducer = (state: Array<TodolistType> = initialState, action: ActionsType): Array<TodolistType> => {\r\n    switch (action.type) {\r\n        // get\r\n        case 'SET-TODOLISTS': {\r\n            return action.todolists.map(tl => ({\r\n                ...tl,\r\n                filter: 'all'\r\n            }))\r\n        }\r\n        // post\r\n        case 'ADD-TODOLIST': {\r\n            return [{\r\n                _id: action.todolistId,\r\n                title: action.title,\r\n                filter: 'all'\r\n            }, ...state]\r\n        }\r\n        // update (put)\r\n        case 'CHANGE-TODOLIST-TITLE': {\r\n            const todolist = state.find(tl => tl._id === action._id);\r\n            if (todolist) {\r\n                todolist.title = action.title;\r\n            }\r\n            return [...state]\r\n        }\r\n        case 'CHANGE-TODOLIST-FILTER': {\r\n            const todolist = state.find(tl => tl._id === action._id);\r\n            if (todolist) {\r\n                todolist.filter = action.filter;\r\n            }\r\n            return [...state]\r\n        }\r\n        //delete\r\n        case 'REMOVE-TODOLIST': {\r\n            return state.filter(tl => tl._id !== action._id)\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const setTodolistsAC = (todolists: Array<TodolistType>): SetTodolistsActionType => {\r\n    return { type: 'SET-TODOLISTS', todolists }\r\n}\r\n\r\nexport const addTodolistAC = (title: string): AddTodolistActionType => {\r\n    return { type: 'ADD-TODOLIST', title: title, todolistId: v1() }\r\n}\r\n\r\nexport const changeTodolistTitleAC = (todolistId: string, title: string): ChangeTodolistTitleActionType => {\r\n    return { type: 'CHANGE-TODOLIST-TITLE', _id: todolistId, title: title }\r\n}\r\n\r\nexport const changeTodolistFilterAC = (id: string, filter: FilterValuesType): ChangeTodolistFilterActionType => {\r\n    return { type: 'CHANGE-TODOLIST-FILTER', _id: id, filter: filter }\r\n}\r\n\r\nexport const removeTodolistAC = (todolistId: string): RemoveTodolistActionType => {\r\n    return { type: 'REMOVE-TODOLIST', _id: todolistId }\r\n}\r\n\r\n//thunk\r\n// get\r\nexport const getTodolistsThunk = () => async (dispatch: Dispatch) => {\r\n    const res = await todoApi.getTodolists()\r\n    //@ts-ignore\r\n    res.data.map((el: any) => dispatch(getTasksTC(el._id)))\r\n    //@ts-ignore\r\n    dispatch(setTodolistsAC(res.data))\r\n}\r\n// post\r\nexport const addTodolistsThunk = (title: string) => async (dispatch: Dispatch<ActionsType>) => {\r\n    let response = await todoApi.createTodolist(title)\r\n    dispatch(addTodolistAC(title))\r\n}\r\n\r\n// put\r\nexport const updateTodolistsThunk = (todolistId: string, title: string) => async (dispatch: Dispatch<ActionsType>) => {\r\n    let response = await todoApi.updateTodolist(todolistId, title)\r\n    dispatch(changeTodolistTitleAC(todolistId, title))\r\n}\r\n\r\n// delete\r\nexport const deleteTodolistsThunk = (todolistId: string) => async (dispatch: Dispatch<ActionsType>) => {\r\n    let response = await todoApi.deleteTodolist(todolistId)\r\n    dispatch(removeTodolistAC(todolistId))\r\n}\r\n","/home/hannamintel/MY FILES/GIT/TaskManager_App/src/bll/tasks-reducer.ts",["65","66","67"],"/home/hannamintel/MY FILES/GIT/TaskManager_App/src/components/Todolist.tsx",["68","69","70","71","72","73","74"],"/home/hannamintel/MY FILES/GIT/TaskManager_App/src/components/Task.tsx",["75","76","77"],"import React, { ChangeEvent, useCallback } from 'react'\r\nimport { Checkbox, IconButton } from '@material-ui/core'\r\nimport { EditableSpan } from './EditableSpan'\r\nimport { Delete } from '@material-ui/icons'\r\nimport { TaskType } from './Todolist'\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    taskId: string\r\n    todolistId: string\r\n    changeTaskStatus: (id: string, isDone: boolean, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (todolistId: string, taskId: string) => void\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n\r\n    const onClickHandler = useCallback(() =>\r\n        props.removeTask(props.task.todolistId, props.taskId),\r\n        [props.task.todolistId, props.taskId]);\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        props.changeTaskStatus(props.task.todolistId, newIsDoneValue, props.taskId)\r\n    }, [props.task.todolistId, props.taskId]);\r\n\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        props.changeTaskTitle(props.task.todolistId, newValue, props.taskId)\r\n    }, [props.task.todolistId, props.taskId]);\r\n\r\n    return <div key={props.task.todolistId} className={props.task.isDone ? 'is-done' : ''}>\r\n        <Checkbox\r\n            checked={props.task.isDone}\r\n            color=\"primary\"\r\n            onChange={onChangeHandler}\r\n        />\r\n\r\n        <EditableSpan value={props.task.title} onChange={onTitleChangeHandler} />\r\n        <IconButton onClick={onClickHandler}>\r\n            <Delete />\r\n        </IconButton>\r\n    </div>\r\n})\r\n",["78","79"],{"ruleId":"80","replacedBy":"81"},{"ruleId":"82","replacedBy":"83"},{"ruleId":"84","severity":1,"message":"85","line":6,"column":18,"nodeType":"86","messageId":"87","endLine":6,"endColumn":24},{"ruleId":"84","severity":1,"message":"88","line":40,"column":9,"nodeType":"86","messageId":"87","endLine":40,"endColumn":20},{"ruleId":"84","severity":1,"message":"89","line":41,"column":9,"nodeType":"86","messageId":"87","endLine":41,"endColumn":20},{"ruleId":"90","severity":1,"message":"91","line":61,"column":8,"nodeType":"92","endLine":61,"endColumn":10,"suggestions":"93"},{"ruleId":"90","severity":1,"message":"91","line":66,"column":8,"nodeType":"92","endLine":66,"endColumn":10,"suggestions":"94"},{"ruleId":"84","severity":1,"message":"95","line":48,"column":6,"nodeType":"86","messageId":"87","endLine":48,"endColumn":25},{"ruleId":"84","severity":1,"message":"96","line":2,"column":9,"nodeType":"86","messageId":"87","endLine":2,"endColumn":12},{"ruleId":"84","severity":1,"message":"85","line":2,"column":14,"nodeType":"86","messageId":"87","endLine":2,"endColumn":20},{"ruleId":"84","severity":1,"message":"97","line":2,"column":22,"nodeType":"86","messageId":"87","endLine":2,"endColumn":33},{"ruleId":"84","severity":1,"message":"98","line":111,"column":9,"nodeType":"86","messageId":"87","endLine":111,"endColumn":17},{"ruleId":"84","severity":1,"message":"98","line":117,"column":9,"nodeType":"86","messageId":"87","endLine":117,"endColumn":17},{"ruleId":"84","severity":1,"message":"98","line":123,"column":9,"nodeType":"86","messageId":"87","endLine":123,"endColumn":17},{"ruleId":"84","severity":1,"message":"99","line":131,"column":9,"nodeType":"86","messageId":"87","endLine":131,"endColumn":12},{"ruleId":"84","severity":1,"message":"99","line":138,"column":13,"nodeType":"86","messageId":"87","endLine":138,"endColumn":16},{"ruleId":"84","severity":1,"message":"99","line":144,"column":9,"nodeType":"86","messageId":"87","endLine":144,"endColumn":12},{"ruleId":"84","severity":1,"message":"100","line":8,"column":10,"nodeType":"86","messageId":"87","endLine":8,"endColumn":27},{"ruleId":"84","severity":1,"message":"101","line":9,"column":10,"nodeType":"86","messageId":"87","endLine":9,"endColumn":21},{"ruleId":"90","severity":1,"message":"102","line":39,"column":8,"nodeType":"92","endLine":39,"endColumn":34,"suggestions":"103"},{"ruleId":"90","severity":1,"message":"102","line":46,"column":8,"nodeType":"92","endLine":46,"endColumn":46,"suggestions":"104"},{"ruleId":"90","severity":1,"message":"102","line":48,"column":87,"nodeType":"92","endLine":48,"endColumn":118,"suggestions":"105"},{"ruleId":"90","severity":1,"message":"102","line":49,"column":93,"nodeType":"92","endLine":49,"endColumn":124,"suggestions":"106"},{"ruleId":"90","severity":1,"message":"102","line":50,"column":99,"nodeType":"92","endLine":50,"endColumn":130,"suggestions":"107"},{"ruleId":"90","severity":1,"message":"102","line":19,"column":9,"nodeType":"92","endLine":19,"endColumn":46,"suggestions":"108"},{"ruleId":"90","severity":1,"message":"102","line":24,"column":8,"nodeType":"92","endLine":24,"endColumn":45,"suggestions":"109"},{"ruleId":"90","severity":1,"message":"102","line":28,"column":8,"nodeType":"92","endLine":28,"endColumn":45,"suggestions":"110"},{"ruleId":"80","replacedBy":"111"},{"ruleId":"82","replacedBy":"112"},"no-native-reassign",["113"],"no-negated-in-lhs",["114"],"@typescript-eslint/no-unused-vars","'Button' is defined but never used.","Identifier","unusedVar","'todolistId1' is assigned a value but never used.","'todolistId2' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useCallback has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["115"],["116"],"'UpdateTaskModelType' is defined but never used.","'Box' is defined but never used.","'FormControl' is defined but never used.","'response' is assigned a value but never used.","'res' is assigned a value but never used.","'getTodolistsThunk' is defined but never used.","'useDispatch' is defined but never used.","React Hook useCallback has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useCallback call and refer to those specific props inside useCallback.",["117"],["118"],["119"],["120"],["121"],["122"],["123"],["124"],["113"],["114"],"no-global-assign","no-unsafe-negation",{"desc":"125","fix":"126"},{"desc":"125","fix":"127"},{"desc":"128","fix":"129"},{"desc":"128","fix":"130"},{"desc":"128","fix":"131"},{"desc":"128","fix":"132"},{"desc":"128","fix":"133"},{"desc":"128","fix":"134"},{"desc":"128","fix":"135"},{"desc":"128","fix":"136"},"Update the dependencies array to be: [dispatch]",{"range":"137","text":"138"},{"range":"139","text":"138"},"Update the dependencies array to be: [props]",{"range":"140","text":"141"},{"range":"142","text":"141"},{"range":"143","text":"141"},{"range":"144","text":"141"},{"range":"145","text":"141"},{"range":"146","text":"141"},{"range":"147","text":"141"},{"range":"148","text":"141"},[2091,2093],"[dispatch]",[2295,2297],[1401,1427],"[props]",[1642,1680],[1771,1802],[1897,1928],[2029,2060],[747,784],[1017,1054],[1215,1252]]